2020-06-01
    1、redis缓存首页大广告
    2、缓存同步
    3、ElasticSearch介绍
        3.1、索引结构
        3.2、倒排索引
    4、ElasticSearch的安装
        4.1、环境的需求
        4.2、安装ES
        4.3、配置文件
        4.4、启动ES
        4.5、测试
    5、Kibana的介绍
    6、安装Kibana
    7、head的介绍
    8、安装head
    9、ES入门
        9.1、index的管理  创建  删除  修改
        9.2、mapping的管理  创建  查询  更新  删除
        9.3、document的管理  创建 post  put  查询  删除
    10、ES的读写原理
2020-06-02
    1、IK分词器
        1.1、两种模式  ik_smart   ik_max_word
        1.2、自定义词库
    2、field的详细介绍   就是怎么指定field的属性
        2.1、field的属性  type  analyzer   index   includes  excludes
        2.2、常用的field的类型  text  keyword  date  double
    3、springboot整合ElasticSearch
        3.1、ES客户端
        3.2、搭建工程
        3.3、索引管理
            3.3.1、创建索引
            3.3.2、删除索引
2020-06-03
    1、文档的管理
        1.1、添加文档
        1.2、批量添加
        1.3、修改文本
        1.4、删除文本
    2、文档搜索
        2.1、match_all查询  全部查询
        2.2、分页查询
        2.3、match查询  单条件查询
        2.4、multi_match查询   根据一个分词  查询多个字段
        2.5、boot查询   多条件查询
        2.6、filter查询  不需要计算相关度分数
2020-06-04
    1、highlight查询  高光
    2、Elasticsearch集群
    3、usian项目整合Elasticsearch 把数据导入索引库
2020-06-05
    1、商品的搜索
    2、索引库同步
2020-06-08
    1、商品的详细信息
        1.1、thymeleaf页面静态化
              创建商品详情的thymeleaf模板
              创建RabbitMQ消费者，收到消息后生成静态页面（D:/detail/26774635180.html）
              搭建nginx服务器，返回静态页面
        1.2、redis
              redis缓存商品详情
              先查询redis，如果有直接返回
              再查询mysql，并把查询结果装到redis中再返回
    2、缓存的同步
        在我们修改商品或者删除商品的时候删除redis中商品的详细信息
    3、缓存的穿透
        就是我们查询一条数据时 查询redis缓存没有 查询数据库也没有
        这个时候我们需要在他查询时一个空值的时候也进行缓存一个空值
    4、缓存的击穿
        当我们redis中的key值失效时，会有大量的用户访问数据库，这样就造成了击穿
        我们要加一个分布式锁解决击穿问题
2020-06-09
    1、单点登录
      	1.1、什么是单点登录？
      		SSO英文全称Single Sign On，单点登录，登录一次处处可用
      	2、思路
      		存(登录)：redis(token,user)       cookie(token_key,token)
      		取(查询用户)：cookie(token)--------->redis(user)
    2、工程的搭建
    3、注册信息的校验  校验手机号和用户名存在不存在
    4、用户的注册
    5、用户的登录  登录成功把数据存入redis中
    6、通过token查询用户信息  如果redis中有数据  那么展示用户
    7、退出登录  删除redis中的数据
2020-06-10
    1、购物车的分析
        我们的购物车数据是用map集合来存储的，有未登录状态的购物车和登陆后的购物车
        未登录的数据存在cookie中  登录后的数据存在redis中存着
    2、未登录状态的购物车
        添加购物车   查询cookie中商品列表   添加商品到购物车  再把商品列表添加到cookie中
        查看购物车   把cookie中的商品列表遍历给list集合返回前台
        修改购物车   把商品列表中的某一件商品数量进行修改
        删除购物车   根据商品的id删除商品列表中的数据
    3、登录后的购物车
        添加购物车   查询redis中商品列表   添加商品到购物车  再把商品列表添加到reids中
        查看购物车   把redis中的商品列表遍历给list集合返回前台
        修改购物车   把商品列表中的某一件商品数量进行修改
        删除购物车   根据商品的id删除商品列表中的数据
    4、缓存的同步
        我们在登录的时候获取cookie的购物车,然后在获取redis中的购物车,再写一个for循环，创建一个添加
        购物车的方法，然后再把购物车写入redis中
2020-06-16
    1、订单的描述
        我们在点击购物车结算的时候会跳转到确认订单的页面，我们去的时候要进行拦截  判断用户是否登录，如果
        没有的登录，我们需要进行登录，在跳转到订单确认界面
    2、创建工程
    3、订单确认页面的商品展示
2020-06-17
    1、订单的提交
        涉及到三张表  订单的详细表  物流表  订单表
    2、库存的同步
        当我们提交订单之后把数据库的数据修改
2020-06-18
    1、订单过期
        当我们有的订单没有支付，并且超过2天，我们就把订单关闭
        我们就用到了quartz定时任务，每五秒查看一次，把过期的订单关闭
    2、quartz集群的重复执行问题
        这时候我们就用到setnx分布式锁，每次执行一个
2020-06-19
    1、事务的介绍
        同时执行多条sql语句，要么同时完成，要么同时失败
    2、本地事务
        数据库控制事务   jdbc控制事务   aop控制事务
    3、分布式事务
        把一个应用分成可独立部署的多个服务，因此需要服务与服务之间远程协作才能完成实务操作
    4、分布式事务产生的场景
        两个service---一个数据库
        一个service---多个数据库
    5、RabbitMQ可靠消息最终一致性介绍
        可靠消息：消息成功消费
        最终一致性：事务参与方最终完成事务
    6、可靠消息最终一致性要解决的问题
        上游服务消息发送成功
        下游服务消息消费成功
        对消息幂等







